2025-09-13 22:45:55,012 - INFO  - 
🚀 Starting analysis of function: bar
2025-09-13 22:45:55,013 - INFO  - 
FUNCTION INITIALIZATION
2025-09-13 22:45:55,013 - INFO  - ==================================================

2025-09-13 22:45:55,071 - INFO  - Initial pending functions: ['bar', 'TripleAbsMaxFun']
2025-09-13 22:45:55,071 - INFO  - Now processing function TripleAbsMaxFun

2025-09-13 22:45:55,074 - INFO  - 
GENERATE ANNOTATION FOR TripleAbsMaxFun
2025-09-13 22:45:55,074 - INFO  - ==================================================

2025-09-13 22:45:55,074 - INFO  - Function TripleAbsMaxFun has been initialized
2025-09-13 22:45:55,074 - INFO  - Starting to generate annotation code for TripleAbsMaxFun
2025-09-13 22:45:55,128 - INFO  - 
GENERATE FUNCTION SPECIFICATION FOR TripleAbsMaxFun
2025-09-13 22:45:55,128 - INFO  - ==================================================

2025-09-13 22:45:55,252 - INFO  - Starting to generate complete annotation code for TripleAbsMaxFun
2025-09-13 22:45:55,257 - INFO  - Starting to generate ACSL specification for TripleAbsMaxFun
2025-09-13 22:45:55,257 - INFO  - add assignments to specification
2025-09-13 22:46:35,571 - INFO  - syntax Correct
2025-09-13 22:46:40,575 - INFO  - Loop Invariant:
2025-09-13 22:46:40,575 - INFO  - []
2025-09-13 22:46:40,575 - INFO  - 
2025-09-13 22:46:40,575 - INFO  - Assertion:
2025-09-13 22:46:40,575 - INFO  - [True, True, True, True, True, True, True]
2025-09-13 22:46:40,575 - INFO  - 
2025-09-13 22:46:40,575 - INFO  - Post Condition:
2025-09-13 22:46:40,576 - INFO  - [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
2025-09-13 22:46:40,576 - INFO  - 
2025-09-13 22:46:40,578 - INFO  - 
GENERATE ANNOTATION FOR bar
2025-09-13 22:46:40,579 - INFO  - ==================================================

2025-09-13 22:46:40,579 - INFO  - Function bar has been initialized
2025-09-13 22:46:40,579 - INFO  - Starting to generate annotation code for bar
2025-09-13 22:46:40,603 - INFO  - 
GENERATE FUNCTION SPECIFICATION FOR bar
2025-09-13 22:46:40,603 - INFO  - ==================================================

2025-09-13 22:46:40,632 - INFO  - Starting to generate ACSL specification for bar
2025-09-13 22:46:46,189 - INFO  - syntax Correct
2025-09-13 22:46:51,489 - INFO  - Loop Invariant:
2025-09-13 22:46:51,489 - INFO  - []
2025-09-13 22:46:51,489 - INFO  - 
2025-09-13 22:46:51,490 - INFO  - Assertion:
2025-09-13 22:46:51,490 - INFO  - [True, True, True, True, True, True, True, True]
2025-09-13 22:46:51,490 - INFO  - 
2025-09-13 22:46:51,490 - INFO  - Post Condition:
2025-09-13 22:46:51,490 - INFO  - [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
2025-09-13 22:46:51,490 - INFO  - 
2025-09-13 22:46:51,490 - INFO  - 
SPECIFICATION FOR bar
2025-09-13 22:46:51,490 - INFO  - ==================================================

2025-09-13 22:46:51,490 - INFO  - 
VST Specification for function bar:
/*@
With pIp_abs_l pIp_tmax pIp_ret_v pIp_ret
Require store_int_array(pIp->abs,3, pIp_abs_l) && pIp->tmax == pIp_tmax && *(pIp->ret) == pIp_ret_v && (pIp->ret) == pIp_ret
Ensure emp
*/
2025-09-13 22:46:51,686 - INFO  - 
VERIFICATION FOR bar
2025-09-13 22:46:51,687 - INFO  - ==================================================

2025-09-13 22:46:51,687 - INFO  - TRY TIME: 0
2025-09-13 22:46:57,255 - INFO  - syntax Correct
2025-09-13 22:47:02,578 - INFO  - Loop Invariant:
2025-09-13 22:47:02,578 - INFO  - []
2025-09-13 22:47:02,578 - INFO  - 
2025-09-13 22:47:02,578 - INFO  - Assertion:
2025-09-13 22:47:02,578 - INFO  - [True, True, True, True, True, True, True, True]
2025-09-13 22:47:02,578 - INFO  - 
2025-09-13 22:47:02,578 - INFO  - Post Condition:
2025-09-13 22:47:02,578 - INFO  - [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
2025-09-13 22:47:02,578 - INFO  - 
2025-09-13 22:47:02,579 - INFO  - 
🎯 FINAL SPECIFICATION FOR bar
2025-09-13 22:47:02,579 - INFO  - ==================================================
2025-09-13 22:47:02,579 - INFO  - Output path: output/motivation_example/bar.c
2025-09-13 22:47:02,579 - INFO  - Output file content:



typedef struct __TripleAbsMax
{
    int abs[3];
    int tmax;
    int* ret;
} TripleAbsMax;

/*@
 requires \valid(pIp) && \valid(pIp->ret) ;
 requires \separated(pIp,pIp->ret) ;
 requires \valid(pIp);
 requires \valid(pIp->ret);
 requires \separated(pIp, pIp->ret);

 ensures pIp->ret == \old(pIp->ret);

 ensures -pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[1] && *\old(pIp->ret) == pIp->abs[1];
 ensures -pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 ==> pIp->tmax == pIp->abs[1] && *\old(pIp->ret) == pIp->abs[1];
 ensures -pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[1] && *\old(pIp->ret) == -pIp->abs[1];
 ensures -pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 ==> pIp->tmax == -pIp->abs[1] && *\old(pIp->ret) == -pIp->abs[1];
 ensures pIp->abs[2] <= -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 ==> pIp->tmax == -pIp->abs[1] && *\old(pIp->ret) == -pIp->abs[1];
 ensures pIp->abs[2] <= -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[1] && *\old(pIp->ret) == -pIp->abs[1];
 ensures pIp->abs[2] <= pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 ==> pIp->tmax == pIp->abs[1] && *\old(pIp->ret) == pIp->abs[1];
 ensures pIp->abs[2] <= pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[1] && *\old(pIp->ret) == pIp->abs[1];
 ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[0] && *\old(pIp->ret) == pIp->abs[0];
 ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[0] && *\old(pIp->ret) == -pIp->abs[0];
 ensures -pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[0] && *\old(pIp->ret) == -pIp->abs[0];
 ensures -pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[0] && *\old(pIp->ret) == pIp->abs[0];
 ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[0] && *\old(pIp->ret) == pIp->abs[0];
 ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[0] && *\old(pIp->ret) == -pIp->abs[0];
 ensures pIp->abs[2] <= -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[0] && *\old(pIp->ret) == -pIp->abs[0];
 ensures pIp->abs[2] <= pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[0] && *\old(pIp->ret) == pIp->abs[0];
 ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[2] && *\old(pIp->ret) == pIp->abs[2];
 ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 ==> pIp->tmax == pIp->abs[2] && *\old(pIp->ret) == pIp->abs[2];
 ensures pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 ==> pIp->tmax == pIp->abs[2] && *\old(pIp->ret) == pIp->abs[2];
 ensures pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[2] && *\old(pIp->ret) == pIp->abs[2];
 ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 ==> pIp->tmax == -pIp->abs[2] && *\old(pIp->ret) == -pIp->abs[2];
 ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[2] && *\old(pIp->ret) == -pIp->abs[2];
 ensures -pIp->abs[2] > -pIp->abs[0] && -pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[2] && *\old(pIp->ret) == -pIp->abs[2];
 ensures -pIp->abs[2] > pIp->abs[0] && pIp->abs[0] > pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 ==> pIp->tmax == -pIp->abs[2] && *\old(pIp->ret) == -pIp->abs[2];
 ensures pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[2] && *\old(pIp->ret) == pIp->abs[2];
 ensures pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 ==> pIp->tmax == pIp->abs[2] && *\old(pIp->ret) == pIp->abs[2];
 ensures pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 ==> pIp->tmax == pIp->abs[2] && *\old(pIp->ret) == pIp->abs[2];
 ensures pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] >= 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 ==> pIp->tmax == pIp->abs[2] && *\old(pIp->ret) == pIp->abs[2];
 ensures -pIp->abs[2] > -pIp->abs[1] && pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] >= 0 ==> pIp->tmax == -pIp->abs[2] && *\old(pIp->ret) == -pIp->abs[2];
 ensures -pIp->abs[2] > -pIp->abs[1] && -pIp->abs[0] <= -pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] < 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[2] && *\old(pIp->ret) == -pIp->abs[2];
 ensures -pIp->abs[2] > pIp->abs[1] && -pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] < 0 ==> pIp->tmax == -pIp->abs[2] && *\old(pIp->ret) == -pIp->abs[2];
 ensures -pIp->abs[2] > pIp->abs[1] && pIp->abs[0] <= pIp->abs[1] && pIp->abs[2] < 0 && pIp->abs[1] >= 0 && pIp->abs[0] >= 0 ==> pIp->tmax == -pIp->abs[2] && *\old(pIp->ret) == -pIp->abs[2];

 assigns pIp->tmax, *(pIp->ret);
*/
void TripleAbsMaxFun(TripleAbsMax *pIp)

{
    
    int absfx1 = pIp->abs[0];
    int absfy2 = pIp->abs[1];
    int absfz3 = pIp->abs[2];

    if (pIp->abs[0] < 0)
    {
        absfx1 = -pIp->abs[0];
    }

    if (pIp->abs[1] < 0)
    {
        absfy2 = -pIp->abs[1];
    }

    if (pIp->abs[2] < 0)
    {
        absfz3 = -pIp->abs[2];
    }

    if (absfx1 > absfy2)
    {
        pIp->tmax = absfx1;
    }
    else
    {
        pIp->tmax = absfy2;
    }

    if (absfz3 > pIp->tmax)
    {
        pIp->tmax = absfz3;
    }

    *(pIp->ret) = pIp->tmax;


}
/*@
    requires \valid(pIp);
requires \valid(pIp->ret);
requires \separated(pIp, pIp->ret);
    */
    
void bar(TripleAbsMax *pIp)
{

	pIp -> abs[0] = 1;
	pIp -> abs[1] = 2;
	pIp -> abs[2] = -3;

	TripleAbsMaxFun(pIp);

    /*@ assert pIp -> tmax == 3; */
}
2025-09-13 22:47:02,579 - INFO  - ==================================================
2025-09-13 22:47:02,579 - INFO  - first_pass:
2025-09-13 22:47:02,579 - INFO  - syntax=1, valid=1,satisfy=1
2025-09-13 22:47:02,579 - INFO  - ==================================================
2025-09-13 22:47:02,579 - INFO  - ⏰ OVERALL EXECUTION TIME STATISTICS
2025-09-13 22:47:02,579 - INFO  - Total execution time: 67.57 seconds (1.13 minutes)
2025-09-13 22:47:02,579 - INFO  - ==================================================
